/*
 *Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
 *
 *An example is the root-to-leaf path 1->2->3 which represents the number 123. 
 *
 *Find the total sum of all root-to-leaf numbers. 
 *
 *For example,

    1
   / \
  2   3
 *The root-to-leaf path 1->2 represents the number 12.
 *The root-to-leaf path 1->3 represents the number 13.
 *
 *Return the sum = 12 + 13 = 25.
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int totalSum = 0;
    public int sumNumbers(TreeNode root) {
        
        if(root == null)
        {
            return 0;
        }
        sumNumbersUtility(root, 0);
        return totalSum;
    }
    
    public void sumNumbersUtility(TreeNode root, int currentSum)
    {
        
        if(root.left == null && root.right == null )
        {
            currentSum = (currentSum*10) + root.val;
            totalSum += currentSum;
            currentSum = (currentSum-root.val)/10;
            return;
        }
        
        currentSum = (currentSum*10) + root.val;
        if(root.left != null)
        {
            sumNumbersUtility(root.left, currentSum);
        }
        
        if(root.right != null)
        {
            sumNumbersUtility(root.right, currentSum);
        }
    }
}