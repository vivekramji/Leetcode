/*
 *Given an array nums, there is a sliding window of size k which is moving from the 
 *very left of the array to the very right. 
 *You can only see the k numbers in the window. Each time the sliding window moves 
 *right by one position.
 *
 *For example,
 *Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
 *
 *Window position                Max
 *---------------               -----
 *[1  3  -1] -3  5  3  6  7      3
 *1 [3  -1  -3] 5  3  6  7       3
 *1  3 [-1  -3  5] 3  6  7       5
 *1  3  -1 [-3  5  3] 6  7       5
 *1  3  -1  -3 [5  3  6] 7       6
 *1  3  -1  -3  5 [3  6  7]      7
 *Therefore, return the max sliding window as [3,3,5,5,6,7].
 *
 *Note: 
 *You may assume k is always valid, ie: 1 = k = input array's size for non-empty array.
 *
 *Follow up:
 *Could you solve it in linear time?
*/

public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int[] solution = new int[nums.length - k + 1];
        if(k > nums.length || nums == null)
        {
            return solution;
        }
        
        if(nums.length == 1 || nums.length == 0)
        {
            return nums;
        }
        
        Deque<Integer> dq = new LinkedList<Integer>();
        
        int index = 0;
        
        for(int i = 0; i < k; i++)
        {
            while(!dq.isEmpty() && nums[i] > nums[dq.getLast()])
            {
                dq.removeLast();
            }
            
            dq.addLast(i);
        }
        
        
        for(int i = k; i < nums.length; i++)
        {
            solution[index++] = nums[dq.peek()];
            
            while(!dq.isEmpty() && dq.element() <= i-k)
            {
                dq.removeFirst();
            }
            
            while(!dq.isEmpty() && nums[i] > nums[dq.getLast()])
            {
                dq.removeLast();
            }
            
            dq.addLast(i);
        }
        
        solution[index] = nums[dq.peek()];
        
        return solution;
    }
}