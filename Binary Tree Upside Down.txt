/*
 *Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.
 *
 *For example:
 *Given a binary tree {1,2,3,4,5},
    1
   / \
  2   3
 / \
4   5

 *return the root of the binary tree [4,5,2,#,#,3,1].
   4
  / \
 5   2
    / \
   3   1

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    TreeNode answerRoot = null;
    
    public TreeNode upsideDownBinaryTree(TreeNode root) {
        
        if(root == null || (root.left == null && root.right == null))
        {
            return root;
        }
        
        TreeNode parent = null;
        
        upsideDownBTUtility(parent, root);
        return answerRoot;
        
        
    }
    
    public void upsideDownBTUtility(TreeNode parent, TreeNode node)
    {
        if(node == null)
        {
            answerRoot = parent;
            return;
        }
        
        upsideDownBTUtility(node, node.left);
        
        if(parent == null)
        {
            node.left = null;
            node.right = null;
            return;
        }
        
        node.right = parent;
        node.left = parent.right;
        
    }
}  