/*
 *Given two arrays, write a function to compute their intersection.
 *
 *Example:
 *Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].
 *
 *Note:
 *Each element in the result must be unique.
 *The result can be in any order.
*/

public class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        
        if(nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0)
        {
            return new int[0];
        }
        List<Integer> solution = new ArrayList<Integer>();
        
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        for(int i = 0; i < nums1.length; i++)
        {
            if(i == 0 || nums1[i] != nums1[i-1])
            {
                if(binarySearch(nums1[i], nums2))
                {
                    solution.add(nums1[i]);
                }
            }
            else
            {
                while( i > 0 && i < nums1.length && nums1[i] == nums1[i-1])
                {
                    i++;
                }
                i--;
            }
            
        }
        
        int[] sol = new int[solution.size()];
        for(int i = 0; i < sol.length; i++)
        {
            sol[i] = solution.get(i);
        }
        return sol;
    }
        
        public boolean binarySearch(int number, int[] array)
        {
            
            int start = 0;
            int end = array.length-1;
            
            while(start <= end)
            {
                int mid = (start + end)/2;
                if(array[mid] == number)
                {
                    
                    return true;
                }
                
                if(array[mid] > number)
                {
                    end = mid-1;
                    continue;
                }
                else
                {
                    start = mid+1;
                    continue;
                }
            }
            
            return false;
        }
  
}