/*
 *Sort a linked list in O(n log n) time using constant space complexity.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        
        if(head == null || head.next == null)
        {
            return head;
        }
        
        ListNode slow, fast, prev;
        prev = null;
        
        slow = head;
        fast = head;
        
        while(fast != null && fast.next != null)
        {
           prev = slow;    
           slow = slow.next;
           fast = fast.next.next;
        }
        
        prev.next = null;
        
        ListNode l1 = sortList(head);
        ListNode l2 = sortList(slow);
        
        return merge(l1, l2);
        
    }
    
    
    public ListNode merge(ListNode l1, ListNode l2)
    {
        if(l1 == null && l2 == null)
        {
            return null;
        }
        
        if(l1 == null && l2 != null)
        {
            return l2;
        }
        
        if(l1 != null && l2 == null)
        {
            return l1;
        }
       
       ListNode head = new ListNode(0);
       ListNode tail = head;
        
        while(l1 != null && l2 != null)
        {
            if(l1.val < l2.val)
            {
                tail.next = l1;
                tail = l1;
                l1 = l1.next;
            }
            else if(l1.val > l2.val)
            {
                tail.next = l2;
                tail = l2;
                l2 = l2.next;
            }
            else if(l1.val == l2.val)
            {
                tail.next = l1;
                l1 = l1.next;
                tail = tail.next;
                
                tail.next = l2;
                l2 = l2.next;
                tail = tail.next;
            }
        }
        
        if(l1 != null)
        {
            tail.next = l1;
        }
        
        if(l2 != null)
        {
            tail.next = l2;
        }
        
        return head.next;
    }
}