/*
   INORDER =    1, 2, 3, 4, 5, 6, 7
   POSTORDER =  1, 3, 2, 5, 7, 6, 4

            

               	       4
		   2       6
		 1   3   5   7

  Question not available on leetcode, but a variation of https://leetcode.com/problems/.construct-binary-tree-from-preorder-and-inorder-traversal/#/description
*/

import java.util.*;
import java.lang.*;
import java.io.*;

class Solution
{
	static class Node {
		int value;
		Node left;
		Node right;
		Node(int v)
		{
			value = v;
			left = null;
			right = null;
		}
	}
	
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		int[] inorder = { 1, 2, 3, 4, 5, 6, 7 };
		int[] postorder = { 1, 3, 2, 5, 7, 6, 4 };
		Node root = constructTree(inorder, 0, inorder.length - 1, postorder, 0, postorder.length-1);
	    printTree(root);
	}
	
	public static Node constructTree(int[] inorder, int inStart, int inEnd, int[] postorder, int pStart, int pEnd)
	{
		if(inStart > inEnd)
		{
			return null;
		}
		
		int mid = inStart + (inEnd-inStart)/2;
		Node root = new Node(inorder[mid]);
		root.left = constructTree(inorder, inStart, mid-1, postorder, pStart, pStart+(mid-1-inStart+1));
		root.right = constructTree(inorder, mid+1, inEnd, postorder, pEnd-(inEnd-mid+1), pEnd-1);
		return root;
	}
	
	public static void printTree(Node root)
	{
		if(root == null)
		{
			return;
		}
		printTree(root.right);
		System.out.println(root.value);
		printTree(root.left);
	}
}