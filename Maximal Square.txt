/*
 *Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.
 *
 *For example, given the following matrix:
 *
 * 1 0 1 0 0
 * 1 0 1 1 1
 * 1 1 1 1 1
 * 1 0 0 1 0
 * Return 4.
*/

public class Solution {
    public int maximalSquare(char[][] matrix) {
        
        if(matrix == null || matrix.length == 0)
        {
            return 0;
        }
        
        int[][] dpArray = new int[matrix.length][matrix[0].length];
        int max = 0;
        for(int i = 0; i < matrix[0].length; i++)
        {
            dpArray[0][i] = Integer.parseInt(Character.toString(matrix[0][i]));
            if(dpArray[0][i]*dpArray[0][i] > max)
            {
                    max = dpArray[0][i]*dpArray[0][i];
            }
        }
        
        for(int i = 0; i < matrix.length; i++)
        {
            dpArray[i][0] = Integer.parseInt(Character.toString(matrix[i][0]));
            if(dpArray[i][0]*dpArray[i][0] > max)
            {
                    max = dpArray[i][0]*dpArray[i][0];
            }
        }
        
        for(int i = 1; i < matrix.length; i++)
        {
            for(int j = 1; j < matrix[0].length; j++)
            {
                if(matrix[i][j] == '0')
                {
                    dpArray[i][j] = 0;
                    if(dpArray[i][j]*dpArray[i][j] > max)
                    {
                        max = dpArray[i][j]*dpArray[i][j];
                    }
                    continue;
                }
                
                if(matrix[i][j] == '1')
                {
                    
                        dpArray[i][j] = Math.min(dpArray[i][j-1], Math.min(dpArray[i-1][j], dpArray[i-1][j-1])) + 1;
                        if(dpArray[i][j]*dpArray[i][j] > max)
                        {
                            max = dpArray[i][j]*dpArray[i][j];
                        }
                    
                }
            }
        }
      
        return max;
    }
}