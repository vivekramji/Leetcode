/*
 *Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following  *properties:
 *
 *Integers in each row are sorted from left to right.
 *The first integer of each row is greater than the last integer of the previous row.
 *For example,
 *
 *Consider the following matrix:
 *
[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
 *Given target = 3, return true.
 */

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
     
		int start = 0;
		int end = matrix.length-1;
		
		while(start <= end)
		{
			int mid = (start + end)/2;
			
			if(target >= matrix[mid][0] && target <= matrix[mid][matrix[0].length - 1])
			{	
				boolean val = binarySearch(target, matrix, mid);
				return val;
			}
			else
			{
				if(target < matrix[mid][0])
				{
					end = mid-1;
					continue;
				}else
				{
					start = mid+1;
					continue;
				}
			}
		}
		return false;
	}
	
	public static boolean binarySearch(int key, int[][] matrix, int row)
	{
		int start = 0;
		int end = matrix[0].length-1;
		
		while(start <= end)
		{
			int mid = (start + end)/2;
			
			if(key == matrix[row][mid])
			{
				return true;
			}
			
			if(key < matrix[row][mid])
			{
				end = mid-1;
				continue;
			}
			else
			{
				start = mid+1;
				continue;
			}
		}
		return false;
	}
        
        
    
}