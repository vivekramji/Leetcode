/*
 *Given a binary tree, determine if it is a valid binary search tree (BST).
 *
 *Assume a BST is defined as follows:
 *
 *The left subtree of a node contains only nodes with keys less than the node's key.
 *The right subtree of a node contains only nodes with keys greater than the node's key.
 *Both the left and right subtrees must also be binary search trees.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isValidBST(TreeNode root) {
        
        if(root == null)
        {
            return true;
        }
        
        if(root.left == null && root.right == null)
        {
            return true;
        }
        
        return _isValidBST(root, Long.MAX_VALUE, Long.MIN_VALUE);
        
    }
    
    public boolean _isValidBST(TreeNode root, long max, long min)
    {
        if(root == null)
        {
            return true;
        }
        
        return (root.val > min && root.val < max && _isValidBST(root.left, root.val, min) && _isValidBST(root.right, max, root.val));
    }
}