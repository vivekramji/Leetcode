/*
 *Given two arrays, write a function to compute their intersection.
 *
 *Example:
 *Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].
 *
 *Note:
 *Each element in the result should appear as many times as it shows in both arrays.
 *The result can be in any order.
 *Follow up:
 *What if the given array is already sorted? How would you optimize your algorithm?
 *What if nums1's size is small compared to nums2's size? Which algorithm is better?
 *What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements  *into the memory at once?
 *lt can be in any order.
*/

public class Solution {
    int solutionIndex = 0;
    public int[] intersect(int[] nums1, int[] nums2) {
        
        if(nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0)
        {
            return new int[0];
        }
        
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int[] solution = new int[Math.min(nums1.length, nums2.length)];
        
        if(nums1.length < nums2.length)
        {
            binary(nums1, nums2, solution);
        }
        else
        {
            binary(nums2, nums1, solution);
        }
        System.out.println("Solution Index (After) :"+solutionIndex);
        int[] newArray = Arrays.copyOfRange(solution, 0, solutionIndex);
        return newArray;
    }
    
    public void binary(int[] arr1, int[] arr2, int[] solution)
    {
        int arr2leftIndex = 0;
        for(int i = 0; i < arr1.length; i++)
        {
            int index = binarySearch(arr1[i], arr2, arr2leftIndex);
            
            if(index != -1)
            {
                arr2leftIndex = index+1;
                solution[solutionIndex] = arr2[index];
                solutionIndex++;
            }
        }
        
      System.out.println("Solution Index (Before) :"+solutionIndex);  
    }
    
    public int binarySearch(int num, int[] array, int leftIndex)
    {
        int start = leftIndex;
        int end = array.length-1;
        
        while(start <= end)
        {
            int mid = (start+end)/2;
            if(num == array[mid])
            {
                if(mid-1 >= leftIndex && array[mid] == array[mid-1])
                {
                    end = mid-1; continue;
                }
                else
                {
                    return mid;
                }
            }
            
            if(num < array[mid])
            {
                end = mid-1;
                continue;
            }
            else
            {
                start = mid+1;
            }
        }
        return -1;
    }
}

