/*
 *Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right,  *level by level from leaf to root).
 *
 *For example:
 *Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
 *return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        
        List<List<Integer>> solution = new ArrayList<List<Integer>>();
        int maxLevel = findMaxLevel(root);
        
        for(int i = 0; i < maxLevel; i++)
        {
            List<Integer> inner = new ArrayList<Integer>();
            solution.add(i, inner);
        }
        levelOrderUtility(root, solution, maxLevel-1);
        return solution;
        
    }
    
    public int findMaxLevel(TreeNode root)
    {
        if(root == null)
        {
            return 0;
        }
        
        return 1+Math.max(findMaxLevel(root.left), findMaxLevel(root.right));
    }
    
    public void levelOrderUtility(TreeNode root, List<List<Integer>> solution, int level)
    {
        if(root == null)
        {
            return;
        }
        
        (solution.get(level)).add(root.val);
        levelOrderUtility(root.left, solution, level-1);
        levelOrderUtility(root.right, solution, level-1);
    }
}