/*
 *You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
 *
 *Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
 *
 *You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
*/

/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
     
         int start = 1;
         int result = Integer.MAX_VALUE;
         int end = n;
         
         while(start >= 1 && start <= n && end >=1 && end <= n && start <= end)
         {
             int mid = (start + end) / 2;
             System.out.println(start + "  " + mid + "  " + end);
             System.out.println(start + end);
             if(isBadVersion(mid))
             {
                 if(mid-1 >= 0)
                 {
                     if(isBadVersion(mid-1))
                     {
                         end = mid-1;
                         continue;
                     }
                     else
                     {
                         result = mid;
                         break;
                     }
                 }
                 
                 result = mid;
                 break;
             }
             else
             {
                 start = mid+1;
             }
             
         }
         
         return result;
    }
}