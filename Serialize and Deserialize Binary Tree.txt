/*
 *Serialization is the process of converting a data structure or object into 
 *a sequence of bits so that it can be stored in a file or memory buffer, or 
 *transmitted across a network connection link to be reconstructed later in 
 *the same or another computer environment.
 *
 *Design an algorithm to serialize and deserialize a binary tree. There is no
 * restriction on how your serialization/deserialization algorithm should work. 
 *You just need to ensure that a binary tree can be serialized to a string and this 
 *string can be deserialized to the original tree structure.
 *
 *For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
 *as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a
 * binary tree. You do not necessarily need to follow this format, so please be 
 *creative and come up with different approaches yourself.
 *Note: Do not use class member/global/static variables to store states. Your 
 *serialize and deserialize algorithms should be stateless.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        StringBuilder s = new StringBuilder();
        
        serializeUtility(root, s);
        return s.toString();
        
    }
    
    public void serializeUtility(TreeNode root, StringBuilder s)
    {
        if(root == null)
        {
            s.append("null").append(",");
            return;
        }
        
        s.append(root.val).append(",");
        serializeUtility(root.left, s);
        serializeUtility(root.right, s);
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
        Queue<String> myQ = new LinkedList<String>();
        myQ.addAll(Arrays.asList(data.split(",")));
        return deserializeUtility(myQ);
        
        
    }
    
    public TreeNode deserializeUtility(Queue myQ)
    {
        String s = (String)myQ.remove();
        if(s.equals("null"))
        {
            return null;
        }
        
        TreeNode newNode = new TreeNode(Integer.parseInt(s));
        newNode.left = deserializeUtility(myQ);
        newNode.right = deserializeUtility(myQ);
        return newNode;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));