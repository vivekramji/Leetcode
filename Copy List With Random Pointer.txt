/*
 *A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
 *
 *Return a deep copy of the list.
*/

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        
        Map<RandomListNode, RandomListNode> myMap = new HashMap<RandomListNode, RandomListNode>();
        
        RandomListNode itr = head;
        
        while(itr!= null)
        {
            myMap.put(itr, new RandomListNode(itr.label));
            itr = itr.next;
        }
        myMap.put(null, null);
        
        itr = head;
        
        while(itr != null)
        {
            myMap.get(itr).next = myMap.get(itr.next);
            myMap.get(itr).random = myMap.get(itr.random);
            itr = itr.next;
        }
        
        return myMap.get(head);
    }
}