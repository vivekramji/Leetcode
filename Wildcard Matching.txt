/*
 *Implement wildcard pattern matching with support for '?' and '*'.
 *
 *  '?' Matches any single character.
 *  '*' Matches any sequence of characters (including the empty sequence).
 *
 *The matching should cover the entire input string (not partial).
 *
 *The function prototype should be:
 *bool isMatch(const char *s, const char *p)
 *
 *Some examples:
 *isMatch("aa","a") ? false
 *isMatch("aa","aa") ? true
 *isMatch("aaa","aa") ? false
 *isMatch("aa", "*") ? true
 *isMatch("aa", "a*") ? true
 *isMatch("ab", "?*") ? true
 *isMatch("aab", "c*a*b") ? false
*/


public class Solution {
    public boolean isMatch(String s, String p) {
        
        if(s == null && p == null)
        {
            return true;
        }
        
        boolean[][] dpArray = new boolean[s.length() + 1][p.length() + 1];
        
        dpArray[0][0] = true;
        
        int i = 0;
        boolean firstRow = false;
        for(int j = 1; j <= p.length(); j++)
        {
            if(p.charAt(j-1) == '*' && firstRow == false)
            {
              dpArray[i][j] = true;  
            }
            else
            {
                dpArray[i][j] = false;
                firstRow = true;
            }
        }
        
        int j = 0;
        
        for( i = 1; i <= s.length(); i++)
        {
            dpArray[i][j] = false;
        }
        
        for( i = 1; i <= s.length(); i++)
        {
            for( j = 1; j <= p.length(); j++)
            {
                if(s.charAt(i-1) == p.charAt(j-1))
                {
                    dpArray[i][j] = dpArray[i-1][j-1];
                }
                else if(p.charAt(j-1) == '*')
                {
                    dpArray[i][j] = dpArray[i][j-1] || dpArray[i-1][j-1] || dpArray[i-1][j];
                }
                else if(p.charAt(j-1) == '?')
                {
                    dpArray[i][j] = dpArray[i-1][j-1];
                }
                else if(p.charAt(j-1) != s.charAt(i-1))
                {
                    dpArray[i][j] = false;
                }
                
            }
        }
       return dpArray[s.length()][p.length()] ;
    }
}