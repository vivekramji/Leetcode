/*
 *Design and implement a data structure for Least Recently Used (LRU) cache.
 * It should support the following operations: get and set.
 *
 *get(key) - Get the value (will always be positive) of the key if 
 *the key exists in the cache, otherwise return -1.
 *
 *set(key, value) - Set or insert the value if the key is 
 *not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.
*/


public class LRUCache {
    
    class ListNode
    {
      int value;
      int key;
      ListNode prev;
      ListNode next;
      
      ListNode(int k, int val)
      {
          key = k;
          value = val;
          prev = null;
          next = null;
      }
      ListNode()
      {
          key = Integer.MIN_VALUE;
          value = Integer.MIN_VALUE;
          prev = null;
          next = null;
      }
      
      
    }
    
    public void addNode(ListNode node)
    {
        node.prev = head;
        node.next = head.next;
        head.next = node;
        node.next.prev = node;
        
    }
    
    public void deleteNode()
    {
        ListNode deletingNode = tail.prev;
        cache.remove(deletingNode.key);
        tail.prev = deletingNode.prev;
        deletingNode.prev.next = tail;
    }
    
    public void pushToFront(ListNode node)
    {
        addNode(node);
    }
    
    ListNode head = new ListNode();
    ListNode tail = new ListNode();
    int cap;
    int currentSize;
    Map<Integer, ListNode> cache = new HashMap<Integer, ListNode>();
    
    public LRUCache(int capacity) {
        head.next = tail;
        tail.prev = head;
        cap = capacity;
        currentSize = 0;
        
    }
    
    public int get(int key) {
        ListNode node = cache.get(key);
        
        if(node == null)
        {
            return -1;
        }
        
        node.prev.next = node.next;
        node.next.prev = node.prev;
        pushToFront(node);
        return node.value;
    }
    
    public void set(int key, int value) {
        
        ListNode node = cache.get(key);
        
        if(node == null)
        {
            ListNode newNode = new ListNode(key, value);
            cache.put(key, newNode);
            pushToFront(newNode);
            currentSize++;
            
            if(currentSize > cap)
            {
                deleteNode();
                currentSize--;
            }
        }
        else
        {
            node.value = value;
            cache.put(key, node);
            node.prev.next = node.next;
            node.next.prev = node.prev;
            pushToFront(node);
        }
    }
}
