/* 
   Given a field with land (1), trenches (0) and peaks of varying altitude, level the  
   Field such that, all peaks are leveled to 1 in increasing order of altitude. You cannot     traverse over trenches. 

Return the minimum distance covered in the entire process. 

 *****Modification -> You can traverse only over level fields. You have to level a peak first to traverse over it, to level other adjacent peaks.

 */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Ideone
{
	static class Node {
		int row;
		int col;
		int dist;
		Node(int row, int col, int dist)
		{
			this.row = row;
			this.col = col;
			this.dist = dist;
		}
	}
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		int[][] grid = {{1,0,3,2,3,2},
						{2,1,0,0,1,1},
						{2,4,4,3,1,2},
						{0,0,1,3,1,1},
						};
		System.out.println(func(grid));				
	}
	
	public static int func(int[][] grid)
	{
		TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
		for(int row = 0; row < grid.length; row++)
		{
			for(int col = 0; col < grid[0].length; col++)
			{
				if(grid[row][col] > 1)
				{
					if(!map.containsKey(grid[row][col]))
					{
						map.put(grid[row][col], 0);
					}
					int val = map.get(grid[row][col]);
					val++;
					map.put(grid[row][col], val);
				}
			}
		}
		int startRow = 0; 
		int startCol = 0;
		int distance = 0;
		int[] rowOffset = {-1, 1, 0, 0};
		int[] colOffset = {0, 0, -1, 1};
		while(map.size() > 0)
		{
			
			int key = map.firstKey();
			Node res = BFS(startRow, startCol, key, grid, rowOffset, colOffset);
			if(res == null) return Integer.MAX_VALUE;
			distance += res.dist;
			int value = map.get(key);
			value--;
			if(value == 0)
			{
				map.remove(key);
			}
			else
			{
				map.put(key, value);
			}
			startRow = res.row;
			startCol = res.col;
			grid[res.row][res.col] = 1;
		}
		return distance;
	}
	
	public static Node BFS(int sRow, int sCol, int targetVal, int[][] grid, int[] rowOffset, int[] colOffset)
	{
		Queue<Node> q = new LinkedList<Node>();
		HashSet<String> visited = new HashSet<String>();
		int currentRow = sRow;
		int currentCol = sCol;
		visited.add(currentRow + " " + currentCol);
		for(int k = 0; k < 4; k++)
		{
			int r = currentRow + rowOffset[k];
			int c = currentCol + colOffset[k];
			if(r >= grid.length || r < 0 || c >= grid[0].length || c < 0) continue;
			if(grid[r][c] >= 1)
			{
				q.offer(new Node(r, c, 1));
			}
		}
		while(!q.isEmpty())
		{
			
			int size = q.size();
			for(int i = 0; i < size; i++)
			{
				Node currentNode = q.poll();
				visited.add(currentNode.row + " " + currentNode.col);
				if(grid[currentNode.row][currentNode.col] == targetVal)
				{
					return currentNode;
				}
				else
				{
					for(int k = 0; k < 4; k++)
					{
						int r = currentNode.row + rowOffset[k];
						int c = currentNode.col + colOffset[k];
						if(r >= grid.length || r < 0 || c >= grid[0].length || c < 0 || visited.contains(r+" "+c) || grid[r][c] == 0) continue;
						if(grid[r][c] >= 1)
						{
							q.offer(new Node(r, c, currentNode.dist+1));
						}
					}
				}
			}
		}
		return null;
	}
}