/*
 * Given an array S of n integers, find three integers in S such that the
 * sum is closest to a given number, target. Return the sum of the three integers. 
 * You may assume that each input would have exactly one solution.
 *
 *  For example, given array S = {-1 2 1 -4}, and target = 1.
 *
 *    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/

public class Solution {
    public int threeSumClosest(int[] nums, int target) {
        
        Arrays.sort(nums);
        int difference = Integer.MAX_VALUE;
        int solution = 0;
        int currentSum = 0;
        int low = 0;
        int high = 0;
        for(int i = 0; i < nums.length-2; i++)
        {
            low = i+1;
            high = nums.length-1;
            
            
            while(low < high)
            {
            currentSum = nums[i]+nums[low]+nums[high];
            
            if(currentSum == target)
            {
                solution = currentSum;
                return solution;
            }
            else
            if(currentSum > target)
            {
                if(Math.abs(target-currentSum) < difference)
                {
                    difference = Math.abs(target-currentSum);
                    solution = currentSum;
                   
                    
                }
                high--;
                continue;
            }
            else if(currentSum < target)
            {
                if(Math.abs(target-currentSum) < difference)
                {
                    difference = Math.abs(target - currentSum);
                    solution = currentSum;
                    
                }
                low++;
                    continue;
            }
        }
    }
      return solution;  
    }
}