/*
 *Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
 *
 *For example,
 *If n = 4 and k = 2, a solution is:
 *
 *[
   *[2,4],
   *[3,4],
   *[2,3],
   *[1,2],
   *[1,3],
   *[1,4],
 *]
 */

public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        
        List<List<Integer>> solution = new ArrayList<List<Integer>>();
        
        if(k == 0 || k > n || n == 0)
        {
            return solution;
        }
        
        
        List<Integer> inner = new ArrayList<Integer>();
        int position = 0;
        
        
        combineUtility(inner, solution, 1, n, k, position);
        
        return solution;
    }
    
    public void combineUtility(List<Integer> inner, List<List<Integer>> solution, int index, int n, int k, int position)
    {
        if(position == k)
        {
            solution.add(new ArrayList<Integer>(inner));
            return;
        }
        
        for(int i = index; i <= n; i++)
        {
            inner.add(position, i);
            combineUtility(inner, solution, i+1, n, k, position + 1);
            inner.remove(position);
        }
    }
}