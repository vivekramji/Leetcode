/*
 *Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)
 *
 *You have the following 3 operations permitted on a word:
 *
 *a) Insert a character
 *b) Delete a character
 *c) Replace a character
 *
 */


public class Solution {
    public int minDistance(String word1, String word2) {
        
        if(word1 == null && word2 == null)
        {
            return 0;
        }
        
        if(word1 == null)
        {
            return word2.length();
        }
        
        
        if(word2 == null)
        {
            return word1.length();
        }
        
        
        int[][] dpArray = new int[word1.length() + 1][word2.length() + 1];
        
        for(int i = 0; i < word2.length() + 1; i++)
        {
            dpArray[0][i] = i;
        }
        
        for(int i = 0; i < word1.length() + 1; i++)
        {
            dpArray[i][0] = i;
        }
        
        minDistanceUtility(word1, word2, dpArray);
        
        return dpArray[word1.length()][word2.length()];
        
    }
    
    public void minDistanceUtility(String word1, String word2, int[][] dpArray)
    {
        for(int i = 1; i < word1.length()+1; i++)
        {
            for(int j = 1; j < word2.length()+1; j++)
            {
                if(word1.charAt(i-1) == word2.charAt(j-1))
                {
                    dpArray[i][j] = dpArray[i-1][j-1];
                }
                else
                {
                    dpArray[i][j] = Math.min(dpArray[i-1][j], Math.min(dpArray[i][j-1], dpArray[i-1][j-1])) + 1;
                }
            }
        }
    }
}