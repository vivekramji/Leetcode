/*
 *Given a triangle, find the minimum path sum from top to bottom. 
 *Each step you may move to adjacent numbers on the row below.
 *
 *Example : 
 *[
 *   [2],
 *  [3,4],
 * [6,5,7],
 *[4,1,8,3]
 *]
 *The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

*/


public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        
        
       
       int answer = Integer.MAX_VALUE;
       
       if(triangle == null || triangle.size() == 0)
       {
           return answer;
       }
       
       if(triangle.size() == 1)
       {
           return triangle.get(0).get(0);
       }
       
        for(int i = 1; i < triangle.size(); i++)
        {
            int val = triangle.get(i).get(0);
            int totVal = val+triangle.get(i-1).get(0);
            
            triangle.get(i).set(0, totVal);

            for(int j = 1; j < triangle.get(i).size() - 1; j++)
            {
                triangle.get(i).set(j, Math.min(triangle.get(i).get(j) + triangle.get(i-1).get(j),
                                                triangle.get(i).get(j) + triangle.get(i-1).get(j-1)));
                
            }
            
            val = triangle.get(i).get(triangle.get(i).size()-1);
            totVal = val + triangle.get(i-1).get(triangle.get(i-1).size()-1);
            triangle.get(i).set(triangle.get(i).size()-1, totVal);
        }
        
        for(int j = 0; j < triangle.get(triangle.size()-1).size(); j++)
        {
            answer = Math.min(answer, triangle.get(triangle.size()-1).get(j));
        }
        
        
        
        return answer;
        
    }
}