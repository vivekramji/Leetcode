/*
 *Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
 *
 *For example:
 *Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
 *return
 [
   [5,4,11,2],
   [5,8,4,5]
 ]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        
        List<List<Integer>> solution = new ArrayList<List<Integer>>();
        
        List<Integer> innerSolution = new ArrayList<Integer>();
        
        pathSumUtility(root, sum, solution, innerSolution);
        
        return solution;
        
    }
    
    public void pathSumUtility(TreeNode root, int sum, List<List<Integer>> solution, List<Integer> innerSolution)
    {
        if(root == null)
        {
            return;
        }
        
        innerSolution.add(root.val);
        
        if(root.left == null && root.right == null && sum == root.val)
        {
            solution.add(new ArrayList(innerSolution));
            innerSolution.remove(innerSolution.size() - 1);
            return;
        }
        else
        {
            pathSumUtility(root.left, sum-root.val, solution, innerSolution);
            pathSumUtility(root.right, sum-root.val, solution, innerSolution);
        }
        innerSolution.remove(innerSolution.size() - 1);
      
    }
}