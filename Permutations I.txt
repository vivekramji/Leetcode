/*
 *Given a collection of distinct numbers, return all possible permutations.
 *
 *For example,
 *[1,2,3] have the following permutations:
 *[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
        List<List<Integer>> solution  = new ArrayList<List<Integer>>();
        if(nums.length == 0)
        {
            return solution;
        }
        
        List<Integer> innerList = new ArrayList<Integer>();
        innerList.add(nums[0]);
        List<List<Integer>> sol = new ArrayList<List<Integer>>();
        sol.add(innerList);
        
        permuteUtility(nums, sol, solution, 1);
        
        return solution;
        
    }
    
    public void permuteUtility(int[] nums, List<List<Integer>> sol, List<List<Integer>> solution, int index)
    {
        if(index == nums.length)
        {
            solution.addAll(sol);
            return;
        }
        
        List<List<Integer>> tempSolution = new ArrayList<List<Integer>>();
        
        for(List<Integer> l : sol)
        {
            for(int i = 0; i <= l.size(); i++)
            {
                List<Integer> newList = new ArrayList<Integer>(l);
                newList.add(i, nums[index]);
                tempSolution.add(newList);
            }
        }
        
        permuteUtility(nums, tempSolution, solution, index+1);
        
        
    }
}