/*
 You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.

Note:
There will be at least one building. If it is not possible to build such house according to the above rules, return -1.

Url : https://leetcode.com/problems/shortest-distance-from-all-buildings/#/description
*/


public class Solution {
    class Node {
        int row;
        int col;
        Node(int r, int c)
        {
            row = r;
            col = c;
        }
    }
    public int shortestDistance(int[][] grid) {
        int buildingNumber = 0;
        int answer = Integer.MAX_VALUE;
        HashMap<String, Integer> distanceMap = new HashMap<String, Integer>();
        Queue<Node> q = new LinkedList<Node>();
        int[] xPos = {-1, 1, 0, 0};
        int[] yPos = {0, 0, -1, 1};
        for(int i = 0; i < grid.length; i++)
        {
            for(int j = 0; j < grid[0].length; j++)
            {
                if(grid[i][j] == 1)
                {
                    buildingNumber++;
                    q.offer(new Node(i, j));
                    answer = bfs(i, j, buildingNumber, grid, distanceMap, xPos, yPos, q);
                }
            }
        }
        return answer == Integer.MAX_VALUE? -1 : answer;
    }
    
    public int bfs(int row, int col, int buildingNumber, int[][] grid, HashMap<String, Integer> distanceMap, int[] xPos, int[] yPos, Queue<Node> q)
    {
        int distance = 0;
        int answer = Integer.MAX_VALUE;
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int i = 0; i < size; i++)
            {
                Node current = q.poll();
                if(grid[current.row][current.col] == -1*(buildingNumber-1))
                {
                    grid[current.row][current.col] = -1* buildingNumber;
                    if(!distanceMap.containsKey(current.row + " " + current.col))
                    {
                        distanceMap.put(current.row + " " + current.col, 0);
                    }
                    int val = distanceMap.get(current.row + " " + current.col);
                    val+= distance;
                    answer = Math.min(answer, val);
                    distanceMap.put(current.row + " " + current.col, val);
                }
                
                for(int k = 0; k < 4; k++)
                {
                    int newRow = current.row+xPos[k];
                    int newCol = current.col+yPos[k];
                    if(newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length && grid[newRow][newCol] <= 0 && grid[newRow][newCol] != -1*buildingNumber)
                    {
                        q.offer(new Node(newRow, newCol));
                    }
                }
            }
            distance++;
        }
        return answer;
    }
}
